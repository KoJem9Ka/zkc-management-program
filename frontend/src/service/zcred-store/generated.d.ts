/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/credential": {
    /** @description Create or update a credential */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CredentialUpsertDto"];
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": components["schemas"]["CredentialIdDto"];
          };
        };
        /** @description Credential update rejected with provided id */
        403: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/api/v1/credentials": {
    /** @description Get all or search credentials */
    get: {
      parameters: {
        query: {
          "subject.id.key": string;
          "subject.id.type": string;
          "issuer.type": string;
          "issuer.uri": string;
        };
      };
      responses: {
        /** @description Encrypted credentials of subject */
        200: {
          content: {
            "application/json": components["schemas"]["CredentialDto"][];
          };
        };
        /** @description Validation error message */
        400: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/api/v1/want-auth": {
    /** @description Request a nonce for signing for continue authentication */
    post: {
      requestBody: {
        content: {
          "application/json": {
            did: string;
          };
        };
      };
      responses: {
        /** @description Nonce for signing by DID */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/api/v1/auth": {
    /** @description Authenticate user and return JWT */
    post: {
      requestBody: {
        content: {
          "application/json": {
            did: string;
            /** @description JWSSignature from JWS */
            signature: {
              protected: string;
              signature: string;
            };
          };
        };
      };
      responses: {
        /** @description JWT */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** @description Error message */
        401: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Encrypted credential */
    CredentialDto: {
      /** Format: uuid */
      id: string;
      data: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Credential identifier */
    CredentialIdDto: {
      /** Format: uuid */
      id: string;
    };
    CredentialUpsertDto: {
      /** Format: uuid */
      id?: string;
      data: string;
      issuer: components["schemas"]["IssuerDto"];
      subjectId: components["schemas"]["IdentifierDto"];
    };
    IdentifierDto: {
      type: string;
      key: string;
    };
    IssuerDto: {
      type: string;
      /** Format: uri */
      uri: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
